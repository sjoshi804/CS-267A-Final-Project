fun reward(STATE: int(10))
{
if STATE == int(10, 0)
   then flip  0.0000454 else 
if STATE == int(10, 1)
   then flip  0.0000454 else 
if STATE == int(10, 2)
   then flip  0.0000454 else 
if STATE == int(10, 3)
   then flip  0.0000454 else 
if STATE == int(10, 4)
   then flip  0.0000454 else 
if STATE == int(10, 5)
   then flip  0.0000454 else 
if STATE == int(10, 6)
   then flip  0.0000454 else 
if STATE == int(10, 7)
   then flip  0.0000454 else 
if STATE == int(10, 8)
   then flip  0.0000454 else 
if STATE == int(10, 9)
   then flip  1.0 else 
flip  0.0
}

fun transition(STATE: int(10), ACTION: int(2))
{
if STATE == int(10, 0) && ACTION == int(2, 0)
   then discrete(1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 0) && ACTION == int(2, 1)
   then discrete(0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 1) && ACTION == int(2, 0)
   then discrete(1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 1) && ACTION == int(2, 1)
   then discrete(0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 2) && ACTION == int(2, 0)
   then discrete(0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 2) && ACTION == int(2, 1)
   then discrete(0.0,  0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 3) && ACTION == int(2, 0)
   then discrete(0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 3) && ACTION == int(2, 1)
   then discrete(0.0,  0.0,  0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 4) && ACTION == int(2, 0)
   then discrete(0.0,  0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 4) && ACTION == int(2, 1)
   then discrete(0.0,  0.0,  0.0,  0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 5) && ACTION == int(2, 0)
   then discrete(0.0,  0.0,  0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 5) && ACTION == int(2, 1)
   then discrete(0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 6) && ACTION == int(2, 0)
   then discrete(0.0,  0.0,  0.0,  0.0,  0.0,  1.0,  0.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 6) && ACTION == int(2, 1)
   then discrete(0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0,  0.0,  0.00000000) else 
if STATE == int(10, 7) && ACTION == int(2, 0)
   then discrete(0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0,  0.0,  0.0,  0.00000000) else 
if STATE == int(10, 7) && ACTION == int(2, 1)
   then discrete(0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0,  0.00000000) else 
if STATE == int(10, 8) && ACTION == int(2, 0)
   then discrete(0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0,  0.0,  0.00000000) else 
if STATE == int(10, 8) && ACTION == int(2, 1)
   then discrete(0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.00000000) else 
if STATE == int(10, 9) && ACTION == int(2, 0)
   then discrete(0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.0,  0.00000000) else 
if STATE == int(10, 9) && ACTION == int(2, 1)
   then discrete(0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1.00000000) else 
int(10, 0)
}

let STATE_0 = 
   discrete(1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.00000000) in
let ACTION_0 = 
   discrete(0.5000000,  0.50000000) in
let STATE_1 = 
   transition(STATE_0,  ACTION_0) in
let OPTIMAL_0 = 
   reward(STATE_1) in
let _ = 
   observe(OPTIMAL_0) in
let ACTION_1 = 
   discrete(0.5000000,  0.50000000) in
let STATE_2 = 
   transition(STATE_1,  ACTION_1) in
let OPTIMAL_1 = 
   reward(STATE_2) in
let _ = 
   observe(OPTIMAL_1) in
let ACTION_2 = 
   discrete(0.5000000,  0.50000000) in
let STATE_3 = 
   transition(STATE_2,  ACTION_2) in
let OPTIMAL_2 = 
   reward(STATE_3) in
let _ = 
   observe(OPTIMAL_2) in
let ACTION_3 = 
   discrete(0.5000000,  0.50000000) in
let STATE_4 = 
   transition(STATE_3,  ACTION_3) in
let OPTIMAL_3 = 
   reward(STATE_4) in
let _ = 
   observe(OPTIMAL_3) in
let ACTION_4 = 
   discrete(0.5000000,  0.50000000) in
let STATE_5 = 
   transition(STATE_4,  ACTION_4) in
let OPTIMAL_4 = 
   reward(STATE_5) in
let _ = 
   observe(OPTIMAL_4) in
let ACTION_5 = 
   discrete(0.5000000,  0.50000000) in
let STATE_6 = 
   transition(STATE_5,  ACTION_5) in
let OPTIMAL_5 = 
   reward(STATE_6) in
let _ = 
   observe(OPTIMAL_5) in
let ACTION_6 = 
   discrete(0.5000000,  0.50000000) in
let STATE_7 = 
   transition(STATE_6,  ACTION_6) in
let OPTIMAL_6 = 
   reward(STATE_7) in
let _ = 
   observe(OPTIMAL_6) in
let ACTION_7 = 
   discrete(0.5000000,  0.50000000) in
let STATE_8 = 
   transition(STATE_7,  ACTION_7) in
let OPTIMAL_7 = 
   reward(STATE_8) in
let _ = 
   observe(OPTIMAL_7) in
let ACTION_8 = 
   discrete(0.5000000,  0.50000000) in
let STATE_9 = 
   transition(STATE_8,  ACTION_8) in
let OPTIMAL_8 = 
   reward(STATE_9) in
let _ = 
   observe(OPTIMAL_8) in
let ACTION_9 = 
   discrete(0.5000000,  0.50000000) in
let STATE_10 = 
   transition(STATE_9,  ACTION_9) in
let OPTIMAL_9 = 
   reward(STATE_10) in
let _ = 
   observe(OPTIMAL_9) in
let ACTION_10 = 
   discrete(0.5000000,  0.50000000) in
let STATE_11 = 
   transition(STATE_10,  ACTION_10) in
let OPTIMAL_10 = 
   reward(STATE_11) in
let _ = 
   observe(OPTIMAL_10) in
let ACTION_11 = 
   discrete(0.5000000,  0.50000000) in
let STATE_12 = 
   transition(STATE_11,  ACTION_11) in
let OPTIMAL_11 = 
   reward(STATE_12) in
let _ = 
   observe(OPTIMAL_11) in
let ACTION_12 = 
   discrete(0.5000000,  0.50000000) in
let STATE_13 = 
   transition(STATE_12,  ACTION_12) in
let OPTIMAL_12 = 
   reward(STATE_13) in
let _ = 
   observe(OPTIMAL_12) in
let ACTION_13 = 
   discrete(0.5000000,  0.50000000) in
let STATE_14 = 
   transition(STATE_13,  ACTION_13) in
let OPTIMAL_13 = 
   reward(STATE_14) in
let _ = 
   observe(OPTIMAL_13) in
let ACTION_14 = 
   discrete(0.5000000,  0.50000000) in
let STATE_15 = 
   transition(STATE_14,  ACTION_14) in
let OPTIMAL_14 = 
   reward(STATE_15) in
let _ = 
   observe(OPTIMAL_14) in
let _ = 
   observe(STATE_0 == int(10, 0)) in
ACTION_0
